#!/bin/bash
set -eu

# Generated by lctl - Lambda Control Tool
# Function: test_lambda
# Generated at: 2025-07-30T21:05:54.010Z

# Check for deployment package
if [ ! -f "lambda-function.zip" ]; then
  echo "Error: lambda-function.zip not found. Please run 'makezip' command first."
  exit 1
fi

# Environment Variables
ENVIRON="Variables={"
ENVIRON+="ENV=development,"
ENVIRON+="DEBUG=true"
ENVIRON+="}"

# Lambda関数の存在を確認
if aws lambda get-function --function-name test_lambda &> /dev/null; then
    echo "Updating existing Lambda function: test_lambda"
    aws lambda update-function-code --function-name test_lambda --zip-file fileb://lambda-function.zip | jq .
    
    # 関数がActiveになるまで待機
    aws lambda wait function-active --function-name test_lambda

    # 設定の更新
    aws lambda update-function-configuration --function-name test_lambda \
        --runtime python3.12 \
        --handler test_lambda.handler \
        --role arn:aws:iam::123456789012:role/lambda-execution-role \
        --timeout 30 \
        --memory-size 128 \
        --environment "$ENVIRON" \
        --description "Test Lambda function for lctl" | jq .
    
    # 関数がActiveになるまで待機
    aws lambda wait function-active --function-name test_lambda
else
    echo "Creating new Lambda function: test_lambda"
    aws lambda create-function --function-name test_lambda \
        --zip-file fileb://lambda-function.zip \
        --handler test_lambda.handler \
        --runtime python3.12 \
        --architectures x86_64 \
        --timeout 30 \
        --memory-size 128 \
        --role arn:aws:iam::123456789012:role/lambda-execution-role \
        --environment "$ENVIRON" \
        --description "Test Lambda function for lctl" | jq .
fi

# 共通の追加設定

# Set tags
aws lambda tag-resource --resource "$(aws lambda get-function --function-name test_lambda --query 'Configuration.FunctionArn' --output text)" --tags Environment=development,Project=lctl-test | jq .



# Add permissions
aws lambda add-permission \
        --function-name test_lambda \
        --statement-id api-gateway-invoke \
        --action lambda:InvokeFunction \
        --principal apigateway.amazonaws.com \
        --source-arn arn:aws:execute-api:us-east-1:123456789012:* | jq .
aws lambda add-permission \
        --function-name test_lambda \
        --statement-id eventbridge-invoke \
        --action lambda:InvokeFunction \
        --principal events.amazonaws.com \
        --source-arn arn:aws:events:us-east-1:123456789012:rule/test-rule | jq .
aws lambda add-permission \
        --function-name test_lambda \
        --statement-id deploy-user-invoke \
        --action lambda:InvokeFunction \
        --principal arn:aws:iam::123456789012:user/DeployUser | jq .
aws lambda add-permission \
        --function-name test_lambda \
        --statement-id cross-account-invoke \
        --action lambda:InvokeFunction \
        --principal arn:aws:iam::123456789012:role/CrossAccountRole | jq .



# ロググループが存在しなければ作成する
if ! aws logs describe-log-groups \
    --log-group-name-prefix /aws/lambda/test_lambda \
    --query "logGroups[?logGroupName=='/aws/lambda/test_lambda'].logGroupName" \
    --output text | grep -q "^/aws/lambda/test_lambda$"; then
    echo "Creating log group for test_lambda"
    aws logs create-log-group --log-group-name /aws/lambda/test_lambda | jq .
fi

# ログ保持期間を設定
aws logs put-retention-policy --log-group-name /aws/lambda/test_lambda --retention-in-days 14 | jq .


rm lambda-function.zip

echo "✅ Lambda function test_lambda deployed successfully!"
